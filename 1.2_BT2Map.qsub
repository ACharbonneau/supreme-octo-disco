#!/bin/sh -login
#PBS -j oe
#PBS -l nodes=1:ppn=4,walltime=04:00:00,mem=10gb
#PBS -m a
#PBS -t 0-200

# -o : tells it where to put output from your job
# -j oe : specifies that output and error messages from your job can be placed in the same location
# -l : resource requests (maximum amounts needed for each)
# -M : email address to send status updates to
# -m abe : what to send email updates about (abort, begin, end)
# -N : names your job
# -r n : tells it not to re-run the script in the case of an error (so it doesn't overwrite any results generated$
# -t 0-? : job numbers for array submission


module load bowtie2/2.2.6


#Starting in GBS/ProcessRadtags/

cd ${PBS_O_WORKDIR} || exit #Go to directory with sequencing files

filelist=(*fq) #Get a list of all sequencing files

indiv=${filelist[${PBS_ARRAYID}]} #assign indiv to be current sequence file


#Then launch metadata collector, once per reference per dataset

if [[ ${PBS_ARRAYID} = 0 ]] 
then qsub ../../../supreme-octo-disco/1.3_echo.qsub -N ${PBS_JOBNAME}.metadata -v genome="${genome}",index="${index}",gff="${gff}",bsname="${PBS_JOBNAME}",gffi="${gffi}",exon="${exon}"
fi 

PBS_JOBNAME=${PBS_JOBNAME}_${indiv} #rename job to job_indiv

#Run bowtie2

# Using default mode: search for multiple alignments, report the best one
# --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)
# -D <int>           give up extending after <int> failed extends in a row (15)
# -R <int>           for reads w/ repetitive seeds, try <int> sets of seeds (2)
# -N <int>           max # mismatches in seed alignment; can be 0 or 1 (0)
# -L <int>           length of seed substrings; must be >3, <32 (22)
# -i <func>          interval between seed substrings w/r/t read len (S,1,1.15)


cd BT2map/

echo bsname="${PBS_JOBNAME}"
bowtie2 --end-to-end --sensitive -x ../${index} -U ../${indiv} -S ${PBS_JOBNAME}.sam

#--sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)


if [[ ! -f ${PBS_JOBNAME}.sam ]] 
then qsub ../../supreme-octo-disco/1.2_BT2Map.qsub -t ${PBS_ARRAYID} -v genome="${genome}",gff="${gff}",gffi="Parent",exon="exon",stranded="no",MAXJOBID="${MAXJOBID}",index="${index}"
fi

# Calculate next job to run
NEXT=$(( ${PBS_ARRAYID} + 200 ))
 

#Check to see if next job is past the maximum job id
if [ ${NEXT} -le ${MAXJOBID} ]
then
    cd ${PBS_O_WORKDIR}
    qsub ../supreme-octo-disco/1.2_BT2Map.qsub -t ${NEXT} -v genome="${genome}",gff="${gff}",gffi="Parent",exon="exon",stranded="no",MAXJOBID="${MAXJOBID}",index="${index}"
fi

#Launch samtools

if [[ -f ${PBS_JOBNAME}.sam ]] 
then qsub ../../supreme-octo-disco/1.3_view_samtools.qsub -N ${bsname}.samtools -v genome="${genome}",index="${index}",gff="${gff}",bsname="${PBS_JOBNAME}",indiv="${indiv}",job="${PBS_JOBNAME}",gffi="${gffi}",exon="${exon}",stranded="${stranded}",index="${index}"
fi