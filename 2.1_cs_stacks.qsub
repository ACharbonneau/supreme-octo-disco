#!/bin/sh -login
#PBS -j oe
#PBS -l nodes=1:ppn=20,walltime=4:00:00,mem=64gb
#PBS -m a

# -o : tells it where to put output from your job
# -j oe : specifies that output and error messages from your job can be placed in the same location
# -l : resource requests (maximum amounts needed for each)
# -M : email address to send status updates to
# -m abe : what to send email updates about (abort, begin, end)
# -N : names your job
# -r n : tells it not to re-run the script in the case of an error (so it doesn't overwrite any results generated$
# -t 0-? : job numbers for array submission

cd ${PBS_O_WORKDIR} || exit

##Start in cs_stacks

module load stacks/1.35

mkdir ${outputfolder}

# -g,--aligned — base catalog construction on alignment position, not sequence identity.
# -p processors
# -b assign batchID
# -n — number of mismatches allowed between sample loci when build the catalog
# -o — output path to write results


cstacks -g -p 20 -b ${batchID} -n 1 -o ${outputfolder}/ `cat ${InputFile}` &>> `basename ${InputFile}`.log


# -b — database/batch ID of the catalog to consider (default: guess).
# -P — path to the directory containing Stacks files.
# -M — path to a population map file from which to take sample names.
# -s — filename prefix from which to load sample loci.
# -c — path to the catalog.
# -g,--aligned — base matching on alignment position, not sequence identity.
# -p — enable parallel execution with num_threads threads.
# -o — output path to write results.
# -x — don't verify haplotype of matching locus.


sstacks -g -p 20 -b ${batchID} -c ${outputfolder}/batch_${batchID} `cat ${InputFile}` -o ${outputfolder}/ `basename ${InputFile}`.log


cd ${outputfolder} 

for i in `ls *.matches.tsv`; do mv ${i} `echo ${i} | sed 's/[0-9]*_//'` ; done

qsub ../../../../supreme-octo-disco/2.2_populations.qsub -N ${outputfolder} -v batchID="${batchID}"
