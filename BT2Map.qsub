#!/bin/bash -login
 
### define resources needed:
### walltime - how long you expect the job to run
#PBS -l walltime=04:00:00
  
### nodes:ppn - how many nodes & cores per node (ppn) that you require
#PBS -l nodes=1:ppn=4
#PBS -l feature=gbe    
### mem: amount of memory that the job will need
#PBS -l mem=2gb
##PBS -m abe
#PBS -t 0-50 
### you can give your job a name for easier identification



#Starting in AE_Deconvoluted or  SigSelection
cd ${PBS_O_WORKDIR} || exit #Go to directory with sequencing files


filelist=(*fq) #Get a list of all sequencing files

indiv=${filelist[${PBS_ARRAYID}]} #assign indiv to be current sequence file

PBS_JOBNAME=${PBS_JOBNAME}_${indiv} #rename job to job_indiv


module load bowtie2/2.2.6

#Then launch metadata collector, once per reference per dataset

if [[ ${PBS_ARRAYID} = 0 ]] 
then qsub ../../../supreme-octo-disco/echo.qsub -N ${PBS_JOBNAME}.metadata -v genome="${genome}",index="${index}",gff="${gff}",bsname="${PBS_JOBNAME}",gffi="${gffi}",exon="${exon}"
fi 
#Run bowtie2

# Using default mode: search for multiple alignments, report the best one
# --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)
# -D <int>           give up extending after <int> failed extends in a row (15)
# -R <int>           for reads w/ repetitive seeds, try <int> sets of seeds (2)
# -N <int>           max # mismatches in seed alignment; can be 0 or 1 (0)
# -L <int>           length of seed substrings; must be >3, <32 (22)
# -i <func>          interval between seed substrings w/r/t read len (S,1,1.15)


cd BT2map/

echo bsname="${PBS_JOBNAME}"
bowtie2 --end-to-end --sensitive -x ${index} -U ../${indiv} -S ${PBS_JOBNAME}.sam

#--sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)


if [[ ! -f ${PBS_JOBNAME}.sam ]] 
then qsub ../../../supreme-octo-disco/BT2Map.qsub -t ${PBS_ARRAYID} -v genome=/mnt/research/radishGenomics/AnalysisOfSequencingFiles/MoghePublished/RrContigs.fa.fasta,gff=/mnt/research/radishGenomics/AnalysisOfSequencingFiles/MoghePublished/Rr_gene_pseu.gff.mod,gffi="Parent",exon="exon",stranded="no"
fi

# Calculate next job to run
NEXT=$(( ${PBS_ARRAYID} + 50 ))
 

#Check to see if next job is past the maximum job id
if [ ${NEXT} -le ${MAXJOBID} ]
then
    cd ${PBS_O_WORKDIR}
    qsub ../../../supreme-octo-disco/BT2Map.qsub -t ${NEXT} -v genome=/mnt/research/radishGenomics/AnalysisOfSequencingFiles/MoghePublished/RrContigs.fa.fasta,gff=/mnt/research/radishGenomics/AnalysisOfSequencingFiles/MoghePublished/Rr_gene_pseu.gff.mod,gffi="Parent",exon="exon",stranded="no"
fi

#Launch samtools

if [[ -f ${PBS_JOBNAME}.sam ]] 
then qsub ../../../supreme-octo-disco/view_samtools.qsub -N ${bsname}.samtools -v genome="${genome}",index="${index}",gff="${gff}",bsname="${PBS_JOBNAME}",indiv="${indiv}",job="${PBS_JOBNAME}",gffi="${gffi}",exon="${exon}",stranded="${stranded}"
fi